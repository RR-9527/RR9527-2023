/**
 * Represents a paramether of a function and the argument that was passed to it
 *
 * E.g. `builder.splineToT(10.0, 10.0, 0)`'s arguments would be represented as:
 * ```
 * {
 *   // other stuff...
 *   args: [
 *     { name: 'x', type: 'double', is_tunable: true, value: 10.0 },
 *     { name: 'y', type: 'double', is_tunable: true, value: 10.0 },
 *     { name: 'z', type: 'int'   , is_tunable: true, value: 0    },
 *   ]
 * }
 * ```
 * or a function with a serializable argument (such as temporalMarker) would be represented as:
 * ```
 * {
 *   // other stuff...
 *   args: [
 *     { name: 'offset', type: 'double', is_tunable: true, value: 0.5 },
 *     {
 *       name: 'callback',
 *       type: 'com.acmerobotics.roadrunner.trajectory.MarkerCallback',
 *       is_serialized: true,
 *       file_path: // Path to the .ser file
 *     }
 *   ]
 * }
 * ```
 */
export interface Argument {
  name: string;
  type: string;
  data: any;
  is_tunable?: boolean;
  is_serialized?: boolean;
  file_path?: string;
}

/**
 * Represents a method call on the `TuningAutoBuilder` class.
 *
 * E.g. `builder.splineTo(10.0, 10.0, 0)` would be represented as:
 * ```
 * {
 *   method_name: 'splineTo',   // The name of the method to call
 *
 *   index: 0,                  // The order in which the method was called
 *                              // in relation to the others
 *
 *   tag: '3',                  // The method tag, defaults to # of times
 *                              // the method had been called at that point
 *
 *   args: [                    // The arguments to pass to the method
 *       // ...
 *   ]
 * }
 * ```
 * These will later be reconstructed into an `ActualAutoBuilder` usage instance.
 */
export interface MethodCall {
  method_name: string;
  index: number;
  tag: string;
  args: Argument[];
}

/**
 * Represents the auto as a whole, containing each and every to-be paths, along with some of the
 * necessary metadata to generate the code.
 */
export interface AutoBuilder {
  method_calls: MethodCall[];
}

/**
 * The configuration for the auto generator.
 * json_output_path: The path to the AutoBuilder JSON file that was generated by the Kotlin side
 * java_output_path: The path to the Java file that will be generated by this script
 */
export interface AutoBuilderConfig {
  json_output_path: string;
  java_output_path: string;
}